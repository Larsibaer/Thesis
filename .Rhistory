color = assignment_group,
size = business_percentage)) +
geom_point(alpha = .5) +
scale_color_brewer(palette = "Dark2") +
labs(title = "Time Worked by Account and OpenedToClosed",
y = "Opened to Closed (Hours)", x = "Time Worked (Hours)")
ggplotly(p)
p <- ggplot(data_assignment_group %>% filter(time_worked < 400000) %>% filter(reassignment_count < 5) %>% filter(business_percentage < 100) %>% filter(cluster == 1) %>% filter(assignment_group != "Service Desk 1st Level"),
aes(x = time_worked,
y = openedToClosed,
color = assignment_group,
size = business_percentage)) +
geom_point(alpha = .5) +
scale_color_brewer(palette = "Dark2") +
labs(title = "Time Worked by Account and OpenedToClosed",
y = "Opened to Closed (Hours)", x = "Time Worked (Hours)")
ggplotly(p)
ggplotly(p)
ggplotly(p)
# Do the same plot as interactiive plot with plotly library
library(plotly)
p <- ggplot(data_assignment_group %>% filter(time_worked < 400000) %>% filter(reassignment_count < 5) %>% filter(business_percentage < 100) %>% filter(cluster == 1) %>% filter(assignment_group != "Service Desk 1st Level"),
aes(x = time_worked,
y = openedToClosed,
color = assignment_group,
size = business_percentage)) +
geom_point(alpha = .5) +
scale_color_brewer(palette = "Dark2") +
labs(title = "Time Worked by Account and OpenedToClosed",
y = "Opened to Closed (Hours)", x = "Time Worked (Hours)")
ggplotly(p)
ggplotly(p)
p <- ggplot(data_assignment_group %>% filter(time_worked < 400000) %>% filter(reassignment_count < 5) %>% filter(business_percentage < 100) %>% filter(cluster == 7) %>% filter(assignment_group != "Service Desk 1st Level"),
aes(x = time_worked,
y = openedToClosed,
color = assignment_group,
size = business_percentage)) +
geom_point(alpha = .5) +
scale_color_brewer(palette = "Dark2") +
labs(title = "Time Worked by Account and OpenedToClosed",
y = "Opened to Closed (Hours)", x = "Time Worked (Hours)")
ggplotly(p)
p <- ggplot(data_assignment_group %>% filter(time_worked < 400000) %>% filter(reassignment_count < 5) %>% filter(business_percentage < 100) %>% filter(cluster == 2) %>% filter(assignment_group != "Service Desk 1st Level"),
aes(x = time_worked,
y = openedToClosed,
color = assignment_group,
size = business_percentage)) +
geom_point(alpha = .5) +
scale_color_brewer(palette = "Dark2") +
labs(title = "Time Worked by Account and OpenedToClosed",
y = "Opened to Closed (Hours)", x = "Time Worked (Hours)")
ggplotly(p)
View(data)
# Barplot of the mean of opendedToClosed by assignment group
ggplot(data = data_assignment_group,
aes(x = assignment_group,
y = openedToClosed,
fill = assignment_group)) +
geom_bar(stat = "summary", fun.y = "mean") +
labs(title = "Mean of Opened to Closed by Assignment Group",
y = "Mean of Opened to Closed (Hours)", x = "Assignment Group")
# Barplot of the mean of opendedToClosed by assignment group
# Text of assignment_group should be in an angle of 45 degree
ggplot(data = data_assignment_group,
aes(x = assignment_group,
y = openedToClosed,
fill = assignment_group)) +
geom_bar(stat = "summary", fun.y = "mean") +
labs(title = "Mean of Opened to Closed by Assignment Group",
y = "Mean of Opened to Closed (Hours)", x = "Assignment Group") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the data
write.csv(data, "Data/data.csv",row.names = FALSE)
# Barplot of the mean of opendedToClosed by assignment group
ggplot(data = data,
aes(x = assignment_group,
y = openedToClosed,
fill = assignment_group)) +
geom_bar(stat = "summary", fun.y = "mean") +
labs(title = "Mean of Opened to Closed by Assignment Group",
y = "Mean of Opened to Closed (Hours)", x = "Assignment Group") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
data_assignment_group_top10 <- data %>%
group_by(assignment_group) %>%
summarise(n = n()) %>%
arrange(desc(n)) %>%
head(10)
# Filter data, where assignment group is in the top 10
data_assignment_group <- data %>%
filter(assignment_group %in% data_assignment_group_top10$assignment_group)
# Barplot of the mean of opendedToClosed by assignment group
ggplot(data = data_assignment_group,
aes(x = assignment_group,
y = openedToClosed,
fill = assignment_group)) +
geom_bar(stat = "summary", fun.y = "mean") +
labs(title = "Mean of Opened to Closed by Assignment Group",
y = "Mean of Opened to Closed (Hours)", x = "Assignment Group") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data = data_assignment_group,
aes(x = assignment_group,
y = openedToClosed,
fill = assignment_group)) +
geom_boxplot() +
labs(title = "Boxplot of Opened to Closed by Assignment Group",
y = "Opened to Closed (Hours)", x = "Assignment Group") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#Let's visualize the wage columnns with and without outliers
data %>%
plot_outlier(col="aquamarine3",diagnose_outlier(data['wage']) %>%
filter(outliers_ratio >= 0.5) %>%          # dplyr
select(variables) %>%
unlist())
#Let's visualize the wage columnns with and without outliers
data %>%
plot_outlier(col="aquamarine3",diagnose_outlier(data['opendedToClosed']) %>%
filter(outliers_ratio >= 0.5) %>%          # dplyr
select(variables) %>%
unlist())
#Let's visualize the wage columnns with and without outliers
data %>%
plot_outlier(col="aquamarine3",diagnose_outlier(data['openedToClosed']) %>%
filter(outliers_ratio >= 0.5) %>%          # dplyr
select(variables) %>%
unlist())
#Let's visualize the wage columnns with and without outliers
data %>%
plot_outlier(col="aquamarine3",diagnose_outlier(data['openedToClosed']) %>%
filter(outliers_ratio >= 0.5) %>%          # dplyr
select(variables) %>%
unlist())
outlier <- function(x){
quantiles <- quantile(x, c(.05, .95))
x[x < quantiles[1]] <- quantiles[1]
x[x > quantiles[2]] <- quantiles[2]
x
}
#Use function outlier for the dataset
data['openedToClosed'] <- map_df(data['openedToClosed'], outlier)
#Save to later use on
data_outliers10 <- data
# Let's check our dependent variable "wage"
ggplot(data_outliers10, aes(x = openedToClosed)) +
geom_histogram(fill="aquamarine3", color = "black") +
labs(title = "Histogram of the wages for option 1") +
theme(legend.position="none")
# Barplot of the mean of opendedToClosed by assignment group
ggplot(data = data_assignment_group,
aes(x = assignment_group,
y = openedToClosed,
fill = assignment_group)) +
geom_bar(stat = "summary", fun.y = "mean") +
labs(title = "Mean of Opened to Closed by Assignment Group",
y = "Mean of Opened to Closed (Hours)", x = "Assignment Group") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Same plot as Boxplot
ggplot(data = data_assignment_group,
aes(x = assignment_group,
y = openedToClosed,
fill = assignment_group)) +
geom_boxplot() +
labs(title = "Boxplot of Opened to Closed by Assignment Group",
y = "Opened to Closed (Hours)", x = "Assignment Group") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
data_assignment_group_top10 <- data %>%
group_by(assignment_group) %>%
summarise(n = n()) %>%
arrange(desc(n)) %>%
head(10)
# Filter data, where assignment group is in the top 10
data_assignment_group <- data %>%
filter(assignment_group %in% data_assignment_group_top10$assignment_group)
# Barplot of the mean of opendedToClosed by assignment group
ggplot(data = data_assignment_group,
aes(x = assignment_group,
y = openedToClosed,
fill = assignment_group)) +
geom_bar(stat = "summary") +
labs(title = "Mean of Opened to Closed by Assignment Group",
y = "Mean of Opened to Closed (Hours)", x = "Assignment Group") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Same plot as Boxplot
ggplot(data = data_assignment_group,
aes(x = assignment_group,
y = openedToClosed,
fill = assignment_group)) +
geom_boxplot() +
labs(title = "Boxplot of Opened to Closed by Assignment Group",
y = "Opened to Closed (Hours)", x = "Assignment Group") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(data_assignment_group_top10)
View(data_assignment_group)
# Same plot as Boxplot
ggplot(data = data_assignment_group %>% filter(createdby != "Sstem"),
aes(x = assignment_group,
y = openedToClosed,
fill = assignment_group)) +
geom_boxplot() +
labs(title = "Boxplot of Opened to Closed by Assignment Group",
y = "Opened to Closed (Hours)", x = "Assignment Group") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Same plot as Boxplot
ggplot(data = data_assignment_group %>% filter(created_by_cleaned != "Sstem"),
aes(x = assignment_group,
y = openedToClosed,
fill = assignment_group)) +
geom_boxplot() +
labs(title = "Boxplot of Opened to Closed by Assignment Group",
y = "Opened to Closed (Hours)", x = "Assignment Group") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Same plot as Boxplot
ggplot(data = data_assignment_group %>% filter(created_by_cleaned != "System"),
aes(x = assignment_group,
y = openedToClosed,
fill = assignment_group)) +
geom_boxplot() +
labs(title = "Boxplot of Opened to Closed by Assignment Group",
y = "Opened to Closed (Hours)", x = "Assignment Group") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
groups <- data %>%
group_by(assignment_group) %>%
summarize(
totalTime = mean(openedToClosed, na.rm = TRUE),
timeWorked = mean(time_worked, na.rm = TRUE),
n = n()
)
ggplot(groups, aes(time_worked, groups)) + geom_point()
groups <- data %>%
group_by(assignment_group) %>%
summarize(
totalTime = mean(openedToClosed, na.rm = TRUE),
timeWorked = mean(time_worked, na.rm = TRUE),
n = n()
)
ggplot(groups, aes(time_worked, groups)) + geom_point()
groups <- data %>%
group_by(assignment_group) %>%
summarize(
totalTime = mean(openedToClosed, na.rm = TRUE),
timeWorked = mean(time_worked, na.rm = TRUE),
n = n()
)
ggplot(groups, aes(timeworked, groups)) + geom_point()
groups <- data %>%
group_by(assignment_group) %>%
summarize(
totalTime = mean(openedToClosed, na.rm = TRUE),
timeWorked = mean(time_worked, na.rm = TRUE),
n = n()
)
ggplot(groups, aes(timeWorked, groups)) + geom_point()
groups <- data %>%
group_by(assignment_group) %>%
summarize(
totalTime = mean(openedToClosed, na.rm = TRUE),
timeWorked = mean(time_worked, na.rm = FALSE),
n = n()
)
ggplot(groups, aes(timeWorked, groups)) + geom_point()
View(groups)
group <- data %>%
group_by(assignment_group) %>%
summarize(
totalTime = mean(openedToClosed, na.rm = TRUE),
timeWorked = mean(time_worked, na.rm = TRUE),
n = n()
)
ggplot(group, aes(timeWorked, group)) + geom_point()
View(data)
group <- cases_data %>%
group_by(assignment_group) %>%
summarize(
totalTime = mean(openedToClosed, na.rm = TRUE),
timeWorked = mean(time_worked, na.rm = TRUE),
n = n()
)
group <- data %>%
group_by(assignment_group) %>%
summarize(
totalTime = mean(openedToClosed, na.rm = TRUE),
timeWorked = mean(time_worked, na.rm = TRUE),
n = n()
)
ggplot(group, aes(timeWorked, group)) + geom_point()
View(data)
View(data)
View(group)
group <- data %>%
group_by(assignment_group) %>%
summarize(
totalTime = mean(openedToClosed, na.rm = TRUE),
timeWorked = mean(time_worked, na.rm = TRUE),
n = n()
)
ggplot(group, aes(totalTime, fct_reorder(group, totalTime))) +
geom_point()
library(dyplr)
library(dplyr)
group <- data %>%
group_by(assignment_group) %>%
summarize(
totalTime = mean(openedToClosed, na.rm = TRUE),
timeWorked = mean(time_worked, na.rm = TRUE),
n = n()
)
ggplot(group, aes(totalTime, fct_reorder(group, totalTime))) +
geom_point()
library(tidyverse)
#transform the data to tibble
data <- as_tibble(data)
group <- data %>%
group_by(assignment_group) %>%
summarize(
totalTime = mean(openedToClosed, na.rm = TRUE),
timeWorked = mean(time_worked, na.rm = TRUE),
n = n()
)
ggplot(group, aes(totalTime, fct_reorder(group, totalTime))) +
geom_point()
View(data)
ggplot(group, aes(totalTime, fct_reorder(assignment_group, totalTime))) +
geom_point()
# add labs to code
ggplot(group, aes(totalTime, fct_reorder(assignment_group, totalTime))) +
geom_point() +
labs(title = "Total Time by Assignment Group",
y = "Assignment Group", x = "Total Time (Hours)")
ggplot(data = data_assignment_group %>% fct_infreq(),
aes(x = assignment_group,
y = openedToClosed,
fill = assignment_group)) +
geom_bar(stat = "summary") +
labs(title = "Mean of Opened to Closed by Assignment Group",
y = "Mean of Opened to Closed (Hours)", x = "Assignment Group") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data = data_assignment_group,
aes(x = assignment_group,
y = openedToClosed,
fill = assignment_group)) +
geom_bar(stat = "summary") +
labs(title = "Mean of Opened to Closed by Assignment Group",
y = "Mean of Opened to Closed (Hours)", x = "Assignment Group") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data = data_assignment_group,
aes(x = assignment_group,
y = openedToClosed,
fill = assignment_group),
arrange(openedToClosed)) +
geom_bar(stat = "summary") +
labs(title = "Mean of Opened to Closed by Assignment Group",
y = "Mean of Opened to Closed (Hours)", x = "Assignment Group") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
arrange(mean(openedToClosed)) +
ggplot(data = data_assignment_group,
aes(x = assignment_group,
y = openedToClosed,
fill = assignment_group),
arrange(mean(openedToClosed))) +
geom_bar(stat = "summary") +
labs(title = "Mean of Opened to Closed by Assignment Group",
y = "Mean of Opened to Closed (Hours)", x = "Assignment Group") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
data %>%
ggplot(aes(opened)) +
geom_freqpoly(binwidth = 86400) # 86400 seconds = 1 day
cases_data %>%
ggplot(aes(opened)) +
geom_freqpoly(binwidth = 86400) # 86400 seconds = 1 day
data %>%
mutate(wday = wday(opened, label = TRUE)) %>%
ggplot(aes(x = wday)) +
geom_bar()
data %>%
mutate(wday = wday(opened)) %>%
ggplot(aes(x = wday)) +
geom_bar()
library(lubridate)
data %>%
mutate(wday = wday(opened, label = TRUE)) %>%
ggplot(aes(x = wday)) +
geom_bar()
library(tidyverse)
library(lubridate)
data %>%
mutate(wday = wday(opened, label = TRUE)) %>%
ggplot(aes(x = wday)) +
geom_bar()
wday?
data %>%
mutate(wday = wday(opened, label = TRUE)) %>%
ggplot(aes(x = wday)) +
geom_bar()
data %>%
mutate(wday = wday(opened, label = TRUE)) %>%
ggplot(aes(x = wday)) +
geom_bar()
data %>%
mutate(wday = lubridate::wday(opened, label = TRUE)) %>%
ggplot(aes(x = wday)) +
geom_bar()
data %>%
mutate(wday = lubridate::wday(opened, label = TRUE, abbr = FALSE)) %>%
ggplot(aes(x = wday)) +
geom_bar()
data %>%
ggplot(aes(opened)) +
geom_freqpoly(binwidth = 86400) # 86400 seconds = 1 day
data %>%
filter(opened > "2023-01-01") %>%
ggplot(aes(opened, closed)) +
geom_freqpoly(binwidth = 86400) # 86400 seconds = 1 day
data %>%
filter(opened > "2023-01-01") %>%
ggplot(aes(opened)) +
geom_freqpoly(binwidth = 86400) # 86400 seconds = 1 day
data %>%
ggplot() +
geom_freqpoly(aes(x = opened, color = "Opened"), binwidth = 86400) +
geom_freqpoly(aes(x = closed, color = "Closed"), binwidth = 86400) +
scale_color_manual(values = c("Opened" = "blue", "Closed" = "red")) +
labs(title = "Frequency of Opened and Closed Cases Over Time",
x = "Date",
y = "Frequency",
color = "Case Status")
data %>%
filter(opened > "2023-01-01") %>%
ggplot() +
geom_freqpoly(aes(x = opened, color = "Opened"), binwidth = 86400) +
geom_freqpoly(aes(x = closed, color = "Closed"), binwidth = 86400) +
scale_color_manual(values = c("Opened" = "blue", "Closed" = "red")) +
labs(title = "Frequency of Opened and Closed Cases Over Time",
x = "Date",
y = "Frequency",
color = "Case Status")
# List all observations, where the Frequency of Closed is more than 100 per day
data %>%
filter(opened > "2023-01-01") %>%
ggplot() +
geom_freqpoly(aes(x = opened, color = "Opened"), binwidth = 86400) +
geom_freqpoly(aes(x = closed, color = "Closed"), binwidth = 86400) +
scale_color_manual(values = c("Opened" = "blue", "Closed" = "red")) +
labs(title = "Frequency of Opened and Closed Cases Over Time",
x = "Date",
y = "Frequency",
color = "Case Status") +
geom_freqpoly(data = . %>% filter(closed > "2023-01-01"), aes(x = closed, color = "Closed"), binwidth = 86400) +
scale_color_manual(values = c("Opened" = "blue", "Closed" = "red")) +
labs(title = "Frequency of Opened and Closed Cases Over Time",
x = "Date",
y = "Frequency",
color = "Case Status")
# Show all observations, where the Frequency of Closed is more than 100 per day
data %>%
filter(opened > "2023-01-01") %>%
ggplot() +
geom_freqpoly(aes(x = opened, color = "Opened"), binwidth = 86400) +
geom_freqpoly(aes(x = closed, color = "Closed"), binwidth = 86400) +
scale_color_manual(values = c("Opened" = "blue", "Closed" = "red")) +
labs(title = "Frequency of Opened and Closed Cases Over Time",
x = "Date",
y = "Frequency",
color = "Case Status") +
coord_cartesian(ylim = c(0, 100))
# Make a new dataframe with all observations in a day, where more than 100 cases were closed
test <- data %>%
count(date = as.Date(closed)) %>%
filter(n > 100)
View(test)
View(data)
# filter the data to only include the dates where more than 100 cases were closed
test2 <- data %>%
filter(closed == "2023-11-09")
# filter the data to only include the dates where more than 100 cases were closed
test2 <- data %>%
filter(day(closed) == day("2023-11-09"))
View(test)
View(test2)
# filter the data to only include the dates where more than 100 cases were closed
test2 <- data %>%
filter(mdy(closed) == mdy("2023-11-09"))
# filter the data to only include the dates where more than 100 cases were closed
test2 <- data %>%
filter(ymd(closed) == ymd("2023-11-09"))
# filter the data to only include the dates where more than 100 cases were closed
test2 <- data %>%
filter(ymd(closed) == ymd("20231109"))
# filter the data to only include the dates where more than 100 cases were closed
closed_cases_on_date <- data %>%
filter(closed == as.Date("2023-11-09"))
View(test)
data %>%
filter(opened > "2023-01-01") %>%
ggplot() +
geom_freqpoly(aes(x = opened, color = "Opened"), binwidth = 86400) +
geom_freqpoly(aes(x = closed, color = "Closed"), binwidth = 86400) +
scale_color_manual(values = c("Opened" = "blue", "Closed" = "red")) +
labs(title = "Frequency of Opened and Closed Cases Over Time",
x = "Date",
y = "Frequency",
color = "Case Status")
View(data)
data %>%
filter(opened > "2023-01-01") %>%
ggplot() +
geom_freqpoly(aes(x = opened, color = "Opened"), binwidth = 86400) +
geom_freqpoly(aes(x = closed, color = "Closed"), binwidth = 86400) +
scale_color_manual(values = c("Opened" = "blue", "Closed" = "red")) +
labs(title = "Frequency of Opened and Closed Cases Over Time",
x = "Date",
y = "Frequency",
color = "Case Status") +
coord_cartesian(ylim = c(0, 100))
