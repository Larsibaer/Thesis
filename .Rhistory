avg_tf_idf <- data_long %>%
group_by(cluster, topic) %>%
summarise(avg_tf_idf = mean(value))
# Plot the average TF-IDF scores for each cluster and topic
ggplot(avg_tf_idf, aes(x = cluster, y = avg_tf_idf, fill = topic)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Average TF-IDF Scores by Cluster and Topic",
x = "Cluster",
y = "Average TF-IDF Score",
fill = "Topic") +
theme_minimal()
# For a specific cluster and topic, plot the trend of TF-IDF scores over time
mycluster <- c(6)
filtered_data <- data_long %>%
filter(cluster == mycluster, topic == mytopic)
ggplot(filtered_data, aes(x = opened, y = value)) +
geom_line() +
geom_smooth(method = "lm") +
labs(title = paste("Trend of", mytopic, "for Cluster", mycluster),
x = "Date (Opened)",
y = "TF-IDF Score") +
theme_minimal()
topic_index <- grep("topic_", colnames(data_all))
# Calculate the mean of the topic columns grouped by 'cluster'
topic_distribution_by_cluster <- data_all %>%
select(cluster, all_of(topic_index)) %>%
group_by(cluster) %>%
summarise(across(everything(), mean, na.rm = TRUE))
# Reshape the data for plotting
long_topic_distribution <- pivot_longer(topic_distribution_by_cluster,
cols = -cluster,
names_to = "Topic",
values_to = "Mean_Frequency")
# Plotting with ggplot2
ggplot(long_topic_distribution, aes(x = Topic, y = Mean_Frequency, group = cluster, color = factor(cluster))) +
geom_line() +
geom_point() + # Add points to the line plot
theme_minimal() +
labs(title = 'Mean Frequency of Topics Across Clusters',
x = 'Topic', y = 'Mean Frequency',
color = 'Cluster') +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + # Rotate x-axis labels for better readability
scale_color_brewer(palette = "Set1")  # Use a color palette that's clear
library(corrplot)
numeric_data <- select(data_all, openedToClosed, topic_index, group_index, state_index, user_index)
# Calculate correlation matrix
correlation_matrix <- cor(numeric_data, use = "complete.obs")
# Extract correlations with 'openedToClosed'
correlation_with_openedToClosed <- correlation_matrix["openedToClosed", ]
# Sort and select the top 5 and bottom 5 correlations
top_bottom_correlation <- sort(correlation_with_openedToClosed, decreasing = TRUE)
top_3 <- head(top_bottom_correlation, 5)
bottom_3 <- tail(top_bottom_correlation, 4)
# Combine top 5 and bottom 5 for visualization
important_correlations <- c(top_3, bottom_3)
important_correlation_values <- correlation_matrix[rownames(correlation_matrix) %in% names(important_correlations),
colnames(correlation_matrix) %in% names(important_correlations)]
# Plotting the selected correlations
corrplot(important_correlation_values, method = "circle", type = "upper",
tl.col = "black", tl.srt = 45)  # Rotate labels for better readability
# For a specific cluster and topic, plot the trend of TF-IDF scores over time
mycluster <- c(5)
filtered_data <- data_long %>%
filter(cluster == mycluster, topic == mytopic)
ggplot(filtered_data, aes(x = opened, y = value)) +
geom_line() +
geom_smooth(method = "lm") +
labs(title = paste("Trend of", mytopic, "for Cluster", mycluster),
x = "Date (Opened)",
y = "TF-IDF Score") +
theme_minimal()
# For a specific cluster and topic, plot the trend of TF-IDF scores over time
mycluster <- c(1,2,3,4,5,6,7)
filtered_data <- data_long %>%
filter(cluster == mycluster, topic == mytopic)
ggplot(filtered_data, aes(x = opened, y = value)) +
geom_line() +
geom_smooth(method = "lm") +
labs(title = paste("Trend of", mytopic, "for Cluster", mycluster),
x = "Date (Opened)",
y = "TF-IDF Score") +
theme_minimal()
# Plot a ggplot bar Plot of Business Services for data_all cluster == 3, fill with data_prop_state. Show text in x axis in a 45 degree angle
# Histogram comparison
ggplot(data_all, aes(x = openedToClosed, fill = as.factor(cluster == c(5)))) +
geom_histogram(alpha = 0.5, position = "identity", binwidth = 20) +
scale_fill_manual(values = c("red", "blue"), labels = c("Other Clusters", "Cluster 4 or 5")) +
labs(x = "Duration (openedToClosed)", y = "Frequency", title = "Comparison of Ticket Duration: Cluster 3 vs Other Clusters") +
theme_minimal()
# Plot a ggplot bar Plot of Business Services for data_all cluster == 3, fill with data_prop_state. Show text in x axis in a 45 degree angle
# Histogram comparison
ggplot(data_all, aes(x = openedToClosed, fill = as.factor(cluster == c(5)))) +
geom_histogram(alpha = 0.5, position = "identity", binwidth = 20) +
scale_fill_manual(values = c("red", "blue"), labels = c("Other Clusters", "Cluster 5")) +
labs(x = "Duration (openedToClosed)", y = "Frequency", title = "Comparison of Ticket Duration: Cluster 5 vs Other Clusters") +
theme_minimal()
# Select the columns that contains "prop_state" in the name
state_index <- grep("prop_state", colnames(data_all))
# Make new datafram with columns 1-6 and 20-25
data_prop_state <- select(data_all, number, cluster, c(state_index))
# Remove prop_state_ of column names
colnames(data_prop_state) <- gsub("prop_state_", "", colnames(data_prop_state))
# grouping the data by the cluster number, calculating the average duration for tickets within each cluster, and then visualizing these averages to identify any notable differences among the clusters.
data_prop_state %>%
group_by(cluster) %>%
summarise_all(mean) %>%
pivot_longer(cols = c(3:length(data_prop_state)), names_to = "variable", values_to = "value") %>%
ggplot(aes(x = cluster, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Average Duration of Tickets by Cluster",
x = "Cluster",
y = "Average Duration",
fill = "Variable") +
theme_minimal()
# Select the columns that contains "prop_state" in the name
user_index <- grep("prop_user", colnames(data_all))
data_prop_user <- select(data_all, cluster, c(user_index))
# Replace NA with 0
data_prop_user[is.na(data_prop_user)] <- 0
# Remove prop_user_ of column names
colnames(data_prop_user) <- gsub("prop_user_", "", colnames(data_prop_user))
# Add row with the mean of the columns
colSum <- rbind(data_prop_user, colMeans(data_prop_user[-1]))
# Get all column indexes, where last row is > 2
index <- which(colSum[nrow(colSum),] > 3)
# usering the data by the cluster number, calculating the average duration for tickets within each cluster, and then visualizing these averages to identify any notable differences among the clusters.
data_prop_user %>%
select(cluster, index) %>%
group_by(cluster) %>%
summarise_all(mean) %>%
pivot_longer(cols = c(2:length(index)), names_to = "variable", values_to = "value") %>%
ggplot(aes(x = cluster, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Average Duration of Tickets by Cluster",
x = "Cluster",
y = "Average Duration",
fill = "Variable") +
theme_minimal()
# Select the columns that contains "prop_state" in the name
user_index <- grep("prop_user", colnames(data_all))
data_prop_user <- select(data_all, cluster, c(user_index))
# Replace NA with 0
data_prop_user[is.na(data_prop_user)] <- 0
# Remove prop_user_ of column names
colnames(data_prop_user) <- gsub("prop_user_", "", colnames(data_prop_user))
# Add row with the mean of the columns
colSum <- rbind(data_prop_user, colMeans(data_prop_user[-1]))
# Get all column indexes, where last row is > 2
index <- which(colSum[nrow(colSum),] > 2)
# usering the data by the cluster number, calculating the average duration for tickets within each cluster, and then visualizing these averages to identify any notable differences among the clusters.
data_prop_user %>%
select(cluster, index) %>%
group_by(cluster) %>%
summarise_all(mean) %>%
pivot_longer(cols = c(2:length(index)), names_to = "variable", values_to = "value") %>%
ggplot(aes(x = cluster, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Average Duration of Tickets by Cluster",
x = "Cluster",
y = "Average Duration",
fill = "Variable") +
theme_minimal()
# Select the columns that contains "prop_state" in the name
user_index <- grep("prop_user", colnames(data_all))
data_prop_user <- select(data_all, cluster, c(user_index))
# Replace NA with 0
data_prop_user[is.na(data_prop_user)] <- 0
# Remove prop_user_ of column names
colnames(data_prop_user) <- gsub("prop_user_", "", colnames(data_prop_user))
# Add row with the mean of the columns
colSum <- rbind(data_prop_user, colMeans(data_prop_user[-1]))
# Get all column indexes, where last row is > 2
index <- which(colSum[nrow(colSum),] > 2.5)
# usering the data by the cluster number, calculating the average duration for tickets within each cluster, and then visualizing these averages to identify any notable differences among the clusters.
data_prop_user %>%
select(cluster, index) %>%
group_by(cluster) %>%
summarise_all(mean) %>%
pivot_longer(cols = c(2:length(index)), names_to = "variable", values_to = "value") %>%
ggplot(aes(x = cluster, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Average Duration of Tickets by Cluster",
x = "Cluster",
y = "Average Duration",
fill = "Variable") +
theme_minimal()
# Select the columns that contains "prop_state" in the name
group_index <- grep("prop_group", colnames(data_all))
data_prop_group <- select(data_all, cluster, c(group_index))
# Replace NA with 0
data_prop_group[is.na(data_prop_group)] <- 0
# Remove prop_group_ of column names
colnames(data_prop_group) <- gsub("prop_group_", "", colnames(data_prop_group))
# Add row with the mean of the columns
colSum <- rbind(data_prop_group, colMeans(data_prop_group[-1]))
# Get all column indexes, where last row is > 2
index <- which(colSum[nrow(colSum),] > 2)
# grouping the data by the cluster number, calculating the average duration for tickets within each cluster, and then visualizing these averages to identify any notable differences among the clusters.
data_prop_group %>%
select(cluster, index) %>%
group_by(cluster) %>%
summarise_all(mean) %>%
pivot_longer(cols = c(2:length(index)), names_to = "variable", values_to = "value") %>%
ggplot(aes(x = cluster, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Average Duration of Tickets by Cluster",
x = "Cluster",
y = "Average Duration",
fill = "Variable") +
theme_minimal()
data_prop_group %>%
select(cluster, index) %>%
filter(cluster %in% c(4,5)) %>%
group_by(cluster) %>%
summarise_all(mean) %>%
pivot_longer(cols = c(2:length(index)), names_to = "variable", values_to = "value") %>%
ggplot(aes(x = cluster, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Average Duration of Tickets by Cluster 4 and 5",
x = "Cluster",
y = "Average Duration",
fill = "Variable") +
theme_minimal()
test <- data_prop_group %>%
group_by(cluster) %>%
summarise_all(mean)
data_long_group <- data_all %>%
select(opened, group_index) %>%
select(opened, index) %>%
pivot_longer(cols = -opened, names_to = "group", values_to = "value")
# Plotting the timeline
ggplot(data_long_group, aes(x = opened, y = value, color = group)) +
geom_line(alpha = 0.2) +
geom_smooth(method = "lm") +
labs(title = "Timeline of Prop Group Values", x = "Time", y = "Value") +
theme_minimal() +
theme(legend.position = "bottom")
View(data_prop_group)
# Select the columns that contains "prop_state" in the name
group_index <- grep("prop_group", colnames(data_all))
data_prop_group <- select(data_all, cluster, c(group_index))
data_prop_group <- data_prop_group %>% filter(cluster == 5)
# Replace NA with 0
data_prop_group[is.na(data_prop_group)] <- 0
# Remove prop_group_ of column names
colnames(data_prop_group) <- gsub("prop_group_", "", colnames(data_prop_group))
# Add row with the mean of the columns
colSum <- rbind(data_prop_group, colMeans(data_prop_group[-1]))
# Get all column indexes, where last row is > 2
index <- which(colSum[nrow(colSum),] > 2)
# grouping the data by the cluster number, calculating the average duration for tickets within each cluster, and then visualizing these averages to identify any notable differences among the clusters.
data_prop_group %>%
select(cluster, index) %>%
group_by(cluster) %>%
summarise_all(mean) %>%
pivot_longer(cols = c(2:length(index)), names_to = "variable", values_to = "value") %>%
ggplot(aes(x = cluster, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Average Duration of Tickets by Cluster",
x = "Cluster",
y = "Average Duration",
fill = "Variable") +
theme_minimal()
data_prop_group %>%
select(cluster, index) %>%
filter(cluster %in% c(5)) %>%
group_by(cluster) %>%
summarise_all(mean) %>%
pivot_longer(cols = c(2:length(index)), names_to = "variable", values_to = "value") %>%
ggplot(aes(x = cluster, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Average Duration of Tickets by Cluster 4 and 5",
x = "Cluster",
y = "Average Duration",
fill = "Variable") +
theme_minimal()
data_long_group <- data_all %>%
select(opened, group_index) %>%
select(opened, index) %>%
pivot_longer(cols = -opened, names_to = "group", values_to = "value")
# Plotting the timeline
ggplot(data_long_group, aes(x = opened, y = value, color = group)) +
geom_line(alpha = 0.2) +
geom_smooth(method = "lm") +
labs(title = "Timeline of Prop Group Values", x = "Time", y = "Value") +
theme_minimal() +
theme(legend.position = "bottom")
View(data_prop_group)
# Select the columns that contains "prop_state" in the name
group_index <- grep("prop_group", colnames(data_all))
data_prop_group <- select(data_all, cluster, c(group_index))
data_prop_group <- data_prop_group %>% filter(cluster == 5)
# Replace NA with 0
data_prop_group[is.na(data_prop_group)] <- 0
# Remove prop_group_ of column names
colnames(data_prop_group) <- gsub("prop_group_", "", colnames(data_prop_group))
# Add row with the mean of the columns
colSum <- rbind(data_prop_group, colMeans(data_prop_group[-1]))
View(colSum)
# Select the columns that contains "prop_state" in the name
group_index <- grep("prop_group", colnames(data_all))
data_prop_group <- select(data_all, cluster, openedToClosed, c(group_index))
data_prop_group <- data_prop_group %>% filter(cluster == 5 & openedToClosed > 20)
View(data_prop_group)
data_prop_group <- data_prop_group %>% filter(cluster == 5 & openedToClosed > 20 & prop_group_Service.Desk.1st.Level < 95)
# Select the columns that contains "prop_state" in the name
group_index <- grep("prop_group", colnames(data_all))
data_prop_group <- select(data_all, cluster, openedToClosed, c(group_index))
data_prop_group <- data_prop_group %>% filter(cluster == 5 & openedToClosed > 20 & prop_group_Service.Desk.1st.Level < 95)
# Remove openedToClosed column
data_prop_group <- data_prop_group[-2]
# Replace NA with 0
data_prop_group[is.na(data_prop_group)] <- 0
# Remove prop_group_ of column names
colnames(data_prop_group) <- gsub("prop_group_", "", colnames(data_prop_group))
# Add row with the mean of the columns
colSum <- rbind(data_prop_group, colMeans(data_prop_group[-1]))
# Get all column indexes, where last row is > 2
index <- which(colSum[nrow(colSum),] > 2)
# grouping the data by the cluster number, calculating the average duration for tickets within each cluster, and then visualizing these averages to identify any notable differences among the clusters.
data_prop_group %>%
select(cluster, index) %>%
group_by(cluster) %>%
summarise_all(mean) %>%
pivot_longer(cols = c(2:length(index)), names_to = "variable", values_to = "value") %>%
ggplot(aes(x = cluster, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Average Duration of Tickets by Cluster",
x = "Cluster",
y = "Average Duration",
fill = "Variable") +
theme_minimal()
data_prop_group %>%
select(cluster, index) %>%
filter(cluster %in% c(5)) %>%
group_by(cluster) %>%
summarise_all(mean) %>%
pivot_longer(cols = c(2:length(index)), names_to = "variable", values_to = "value") %>%
ggplot(aes(x = cluster, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Average Duration of Tickets by Cluster 4 and 5",
x = "Cluster",
y = "Average Duration",
fill = "Variable") +
theme_minimal()
data_long_group <- data_all %>%
select(opened, group_index) %>%
select(opened, index) %>%
pivot_longer(cols = -opened, names_to = "group", values_to = "value")
# Plotting the timeline
ggplot(data_long_group, aes(x = opened, y = value, color = group)) +
geom_line(alpha = 0.2) +
geom_smooth(method = "lm") +
labs(title = "Timeline of Prop Group Values", x = "Time", y = "Value") +
theme_minimal() +
theme(legend.position = "bottom")
# Select the columns that contains "prop_state" in the name
group_index <- grep("prop_group", colnames(data_all))
data_prop_group <- select(data_all, cluster, openedToClosed, c(group_index))
data_prop_group <- data_prop_group %>% filter(cluster == 5 & openedToClosed > 20 & prop_group_Service.Desk.1st.Level < 95)
# Remove openedToClosed column
data_prop_group <- data_prop_group[-2]
# # Replace NA with 0
# data_prop_group[is.na(data_prop_group)] <- 0
#
# # Remove prop_group_ of column names
# colnames(data_prop_group) <- gsub("prop_group_", "", colnames(data_prop_group))
#
# # Add row with the mean of the columns
# colSum <- rbind(data_prop_group, colMeans(data_prop_group[-1]))
#
# # Get all column indexes, where last row is > 2
# index <- which(colSum[nrow(colSum),] > 2)
# grouping the data by the cluster number, calculating the average duration for tickets within each cluster, and then visualizing these averages to identify any notable differences among the clusters.
data_prop_group %>%
select(cluster, index) %>%
group_by(cluster) %>%
summarise_all(mean) %>%
pivot_longer(cols = c(2:length(index)), names_to = "variable", values_to = "value") %>%
ggplot(aes(x = cluster, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Average Duration of Tickets by Cluster",
x = "Cluster",
y = "Average Duration",
fill = "Variable") +
theme_minimal()
data_prop_group %>%
select(cluster, index) %>%
filter(cluster %in% c(5)) %>%
group_by(cluster) %>%
summarise_all(mean) %>%
pivot_longer(cols = c(2:length(index)), names_to = "variable", values_to = "value") %>%
ggplot(aes(x = cluster, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Average Duration of Tickets by Cluster 4 and 5",
x = "Cluster",
y = "Average Duration",
fill = "Variable") +
theme_minimal()
data_long_group <- data_all %>%
select(opened, group_index) %>%
select(opened, index) %>%
pivot_longer(cols = -opened, names_to = "group", values_to = "value")
# Plotting the timeline
ggplot(data_long_group, aes(x = opened, y = value, color = group)) +
geom_line(alpha = 0.2) +
geom_smooth(method = "lm") +
labs(title = "Timeline of Prop Group Values", x = "Time", y = "Value") +
theme_minimal() +
theme(legend.position = "bottom")
# Select the columns that contains "prop_state" in the name
group_index <- grep("prop_group", colnames(data_all))
data_prop_group <- select(data_all, cluster, c(group_index))
# Replace NA with 0
data_prop_group[is.na(data_prop_group)] <- 0
# Remove prop_group_ of column names
colnames(data_prop_group) <- gsub("prop_group_", "", colnames(data_prop_group))
# Add row with the mean of the columns
colSum <- rbind(data_prop_group, colMeans(data_prop_group[-1]))
# Get all column indexes, where last row is > 2
index <- which(colSum[nrow(colSum),] > 2)
# grouping the data by the cluster number, calculating the average duration for tickets within each cluster, and then visualizing these averages to identify any notable differences among the clusters.
data_prop_group %>%
select(cluster, index) %>%
group_by(cluster) %>%
summarise_all(mean) %>%
pivot_longer(cols = c(2:length(index)), names_to = "variable", values_to = "value") %>%
ggplot(aes(x = cluster, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Average Duration of Tickets by Cluster",
x = "Cluster",
y = "Average Duration",
fill = "Variable") +
theme_minimal()
data_prop_group %>%
select(cluster, index) %>%
filter(cluster %in% c(4,5)) %>%
group_by(cluster) %>%
summarise_all(mean) %>%
pivot_longer(cols = c(2:length(index)), names_to = "variable", values_to = "value") %>%
ggplot(aes(x = cluster, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Average Duration of Tickets by Cluster 4 and 5",
x = "Cluster",
y = "Average Duration",
fill = "Variable") +
theme_minimal()
data_long_group <- data_all %>%
select(opened, group_index) %>%
select(opened, index) %>%
pivot_longer(cols = -opened, names_to = "group", values_to = "value")
# Plotting the timeline
ggplot(data_long_group, aes(x = opened, y = value, color = group)) +
geom_line(alpha = 0.2) +
geom_smooth(method = "lm") +
labs(title = "Timeline of Prop Group Values", x = "Time", y = "Value") +
theme_minimal() +
theme(legend.position = "bottom")
# Select the columns that contains "prop_state" in the name
group_index <- grep("prop_group", colnames(data_all))
data_prop_group <- select(data_all, cluster, openedToClosed, c(group_index))
data_prop_group <- data_prop_group %>% filter(cluster == 5 & openedToClosed > 20 & prop_group_Service.Desk.1st.Level < 95)
# Remove openedToClosed column
data_prop_group <- data_prop_group[-2]
# # Replace NA with 0
# data_prop_group[is.na(data_prop_group)] <- 0
#
# # Remove prop_group_ of column names
# colnames(data_prop_group) <- gsub("prop_group_", "", colnames(data_prop_group))
#
# # Add row with the mean of the columns
# colSum <- rbind(data_prop_group, colMeans(data_prop_group[-1]))
#
# # Get all column indexes, where last row is > 2
# index <- which(colSum[nrow(colSum),] > 2)
# grouping the data by the cluster number, calculating the average duration for tickets within each cluster, and then visualizing these averages to identify any notable differences among the clusters.
data_prop_group %>%
select(cluster, index) %>%
group_by(cluster) %>%
summarise_all(mean) %>%
pivot_longer(cols = c(2:length(index)), names_to = "variable", values_to = "value") %>%
ggplot(aes(x = cluster, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Average Duration of Tickets by Cluster",
x = "Cluster",
y = "Average Duration",
fill = "Variable") +
theme_minimal()
data_prop_group %>%
select(cluster, index) %>%
filter(cluster %in% c(5)) %>%
group_by(cluster) %>%
summarise_all(mean) %>%
pivot_longer(cols = c(2:length(index)), names_to = "variable", values_to = "value") %>%
ggplot(aes(x = cluster, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Average Duration of Tickets by Cluster 4 and 5",
x = "Cluster",
y = "Average Duration",
fill = "Variable") +
theme_minimal()
data_long_group <- data_all %>%
select(opened, group_index) %>%
select(opened, index) %>%
pivot_longer(cols = -opened, names_to = "group", values_to = "value")
# Plotting the timeline
ggplot(data_long_group, aes(x = opened, y = value, color = group)) +
geom_line(alpha = 0.2) +
geom_smooth(method = "lm") +
labs(title = "Timeline of Prop Group Values", x = "Time", y = "Value") +
theme_minimal() +
theme(legend.position = "bottom")
