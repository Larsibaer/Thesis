filter(date > start_date)
previous_data <- data_long %>%
filter(date <= start_date & date > (start_date %m-% months(6)))  # data from the previous 3 months
# Calculate average TF-IDF scores
avg_recent <- recent_data %>%
filter(term_type == myterm_type) %>%
group_by(term) %>%
summarise(avg_tf_idf_recent = mean(tf_idf))
avg_previous <- previous_data %>%
group_by(term) %>%
summarise(avg_tf_idf_previous = mean(tf_idf))
# Merge the two datasets
trend_analysis <- merge(avg_recent, avg_previous, by = "term")
# Calculate the difference in TF-IDF scores
trend_analysis <- trend_analysis %>%
mutate(change_in_tf_idf = avg_tf_idf_recent - avg_tf_idf_previous)
# Identify top 5 terms with increased TF-IDF scores
top_increased <- trend_analysis %>%
arrange(desc(change_in_tf_idf)) %>%
head(5)
# Identify top 5 terms with decreased TF-IDF scores
top_decreased <- trend_analysis %>%
arrange(change_in_tf_idf) %>%
head(5)
print("Top 5 increased terms in the last 3 months:")
print(top_increased)
print("Top 5 decreased terms in the last 3 months:")
print(top_decreased)
# Assuming you're interested in a specific term across dates
filtered_data <- data_long %>%
filter(term == myterm & term_type == myterm_type)
# Add a trendline for each cluster
ggplot(filtered_data, aes(x = opened, y = tf_idf, color = cluster)) +
geom_line(alpha = 0.4) +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Date (Opened)", y = "TF-IDF Score", title = paste("Trend of", myterm, "in", myterm_type, "Over Time")) +
theme_minimal()
library(dplyr)
library(lubridate)
myterm = "citrix"
myterm_type = "description"
# Convert date column to Date type if not already
data_long$date <- as.Date(data_long$opened)
# Define the date cutoff for the last 3 months
end_date <- max(data_long$date)  # assuming you want up to the latest date in your dataset
start_date <- end_date %m-% months(6)  # 3 months before the end date
# Filter data for the last 3 months and the period before it
recent_data <- data_long %>%
filter(date > start_date)
previous_data <- data_long %>%
filter(date <= start_date & date > (start_date %m-% months(6)))  # data from the previous 3 months
# Calculate average TF-IDF scores
avg_recent <- recent_data %>%
filter(term_type == myterm_type) %>%
group_by(term) %>%
summarise(avg_tf_idf_recent = mean(tf_idf))
avg_previous <- previous_data %>%
filter(term_type == myterm_type) %>%
group_by(term) %>%
summarise(avg_tf_idf_previous = mean(tf_idf))
# Merge the two datasets
trend_analysis <- merge(avg_recent, avg_previous, by = "term")
# Calculate the difference in TF-IDF scores
trend_analysis <- trend_analysis %>%
mutate(change_in_tf_idf = avg_tf_idf_recent - avg_tf_idf_previous)
# Identify top 5 terms with increased TF-IDF scores
top_increased <- trend_analysis %>%
arrange(desc(change_in_tf_idf)) %>%
head(5)
# Identify top 5 terms with decreased TF-IDF scores
top_decreased <- trend_analysis %>%
arrange(change_in_tf_idf) %>%
head(5)
# Assuming you're interested in a specific term across dates
filtered_data <- data_long %>%
filter(term == myterm & term_type == myterm_type)
# Add a trendline for each cluster
ggplot(filtered_data, aes(x = opened, y = tf_idf, color = cluster)) +
geom_line(alpha = 0.4) +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Date (Opened)", y = "TF-IDF Score", title = paste("Trend of", myterm, "in", myterm_type, "Over Time")) +
theme_minimal()
library(dplyr)
library(lubridate)
myterm = "outlook"
myterm_type = "description"
# Convert date column to Date type if not already
data_long$date <- as.Date(data_long$opened)
# Define the date cutoff for the last 3 months
end_date <- max(data_long$date)  # assuming you want up to the latest date in your dataset
start_date <- end_date %m-% months(6)  # 3 months before the end date
# Filter data for the last 3 months and the period before it
recent_data <- data_long %>%
filter(date > start_date)
previous_data <- data_long %>%
filter(date <= start_date & date > (start_date %m-% months(6)))  # data from the previous 3 months
# Calculate average TF-IDF scores
avg_recent <- recent_data %>%
filter(term_type == myterm_type) %>%
group_by(term) %>%
summarise(avg_tf_idf_recent = mean(tf_idf))
avg_previous <- previous_data %>%
filter(term_type == myterm_type) %>%
group_by(term) %>%
summarise(avg_tf_idf_previous = mean(tf_idf))
# Merge the two datasets
trend_analysis <- merge(avg_recent, avg_previous, by = "term")
# Calculate the difference in TF-IDF scores
trend_analysis <- trend_analysis %>%
mutate(change_in_tf_idf = avg_tf_idf_recent - avg_tf_idf_previous)
# Identify top 5 terms with increased TF-IDF scores
top_increased <- trend_analysis %>%
arrange(desc(change_in_tf_idf)) %>%
head(5)
# Identify top 5 terms with decreased TF-IDF scores
top_decreased <- trend_analysis %>%
arrange(change_in_tf_idf) %>%
head(5)
print("Top 5 increased terms in the last 3 months:")
print(top_increased)
print("Top 5 decreased terms in the last 3 months:")
print(top_decreased)
# Assuming you're interested in a specific term across dates
filtered_data <- data_long %>%
filter(term == myterm & term_type == myterm_type)
# Add a trendline for each cluster
ggplot(filtered_data, aes(x = opened, y = tf_idf, color = cluster)) +
geom_line(alpha = 0.4) +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Date (Opened)", y = "TF-IDF Score", title = paste("Trend of", myterm, "in", myterm_type, "Over Time")) +
theme_minimal()
library(dplyr)
library(lubridate)
myterm = "drucker"
myterm_type = "description"
# Convert date column to Date type if not already
data_long$date <- as.Date(data_long$opened)
# Define the date cutoff for the last 3 months
end_date <- max(data_long$date)  # assuming you want up to the latest date in your dataset
start_date <- end_date %m-% months(6)  # 3 months before the end date
# Filter data for the last 3 months and the period before it
recent_data <- data_long %>%
filter(date > start_date)
previous_data <- data_long %>%
filter(date <= start_date & date > (start_date %m-% months(6)))  # data from the previous 3 months
# Calculate average TF-IDF scores
avg_recent <- recent_data %>%
filter(term_type == myterm_type) %>%
group_by(term) %>%
summarise(avg_tf_idf_recent = mean(tf_idf))
avg_previous <- previous_data %>%
filter(term_type == myterm_type) %>%
group_by(term) %>%
summarise(avg_tf_idf_previous = mean(tf_idf))
# Merge the two datasets
trend_analysis <- merge(avg_recent, avg_previous, by = "term")
# Calculate the difference in TF-IDF scores
trend_analysis <- trend_analysis %>%
mutate(change_in_tf_idf = avg_tf_idf_recent - avg_tf_idf_previous)
# Identify top 5 terms with increased TF-IDF scores
top_increased <- trend_analysis %>%
arrange(desc(change_in_tf_idf)) %>%
head(5)
# Identify top 5 terms with decreased TF-IDF scores
top_decreased <- trend_analysis %>%
arrange(change_in_tf_idf) %>%
head(5)
print("Top 5 increased terms in the last 3 months:")
print(top_increased)
print("Top 5 decreased terms in the last 3 months:")
print(top_decreased)
# Assuming you're interested in a specific term across dates
filtered_data <- data_long %>%
filter(term == myterm & term_type == myterm_type)
# Add a trendline for each cluster
ggplot(filtered_data, aes(x = opened, y = tf_idf, color = cluster)) +
geom_line(alpha = 0.4) +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Date (Opened)", y = "TF-IDF Score", title = paste("Trend of", myterm, "in", myterm_type, "Over Time")) +
theme_minimal()
state_index <- grep("prop_state_", colnames(data_all))
group_index <- grep("prop_group_", colnames(data_all))
user_index <- grep("prop_user_", colnames(data_all))
# Reshape from wide to long format and create a new 'term_type' column
data_long <- data_all %>%
pivot_longer(
cols = c(description_index, cause_index, close_notes_index),  # Excluding cluster and date from the reshaping
names_to = c("term_type", "term"),
names_sep = "_",  # Split column names at underscores
values_to = "tf_idf"
)
# remove columns of description_index
data_long <- data_long %>% select(-description_index, -cause_index, -close_notes_index)
data_long <- data_long %>% filter(tf_idf > 0)  # Remove rows with 0 values
state_index <- grep("prop_state_", colnames(data_all))
group_index <- grep("prop_group_", colnames(data_all))
user_index <- grep("prop_user_", colnames(data_all))
# Reshape from wide to long format and create a new 'term_type' column
data_long <- data_all %>%
pivot_longer(
cols = c(description_index, cause_index, close_notes_index),  # Excluding cluster and date from the reshaping
names_to = c("term_type", "term"),
names_sep = "_",  # Split column names at underscores
values_to = "tf_idf"
)
# remove columns of description_index
data_long <- data_long %>% select(-state_index, -group_index, -user_index)
state_index <- grep("prop_state_", colnames(data_all))
group_index <- grep("prop_group_", colnames(data_all))
user_index <- grep("prop_user_", colnames(data_all))
# Reshape from wide to long format and create a new 'term_type' column
data_long <- data_all %>%
pivot_longer(
cols = c(description_index, cause_index, close_notes_index),  # Excluding cluster and date from the reshaping
names_to = c("term_type", "term"),
names_sep = "_",  # Split column names at underscores
values_to = "tf_idf"
)
# remove columns of description_index
data_long <- data_long %>% select(-state_index, -group_index, -user_index)
state_index <- grep("prop_state_", colnames(data_all))
group_index <- grep("prop_group_", colnames(data_all))
user_index <- grep("prop_user_", colnames(data_all))
# Reshape from wide to long format and create a new 'term_type' column
data_long <- data_all %>%
pivot_longer(
cols = c(description_index, cause_index, close_notes_index),  # Excluding cluster and date from the reshaping
names_to = c("term_type", "term"),
names_sep = "_",  # Split column names at underscores
values_to = "tf_idf"
)
# remove columns of description_index
# data_long <- data_long %>% select(-state_index, -group_index, -user_index)
data_long <- data_long %>% filter(tf_idf > 0)  # Remove rows with 0 values
myterm = "Work.in.Progress"
myterm_type = "state"
# Convert date column to Date type if not already
data_long$date <- as.Date(data_long$opened)
# Define the date cutoff for the last 3 months
end_date <- max(data_long$date)  # assuming you want up to the latest date in your dataset
start_date <- end_date %m-% months(6)  # 3 months before the end date
# Filter data for the last 3 months and the period before it
recent_data <- data_long %>%
filter(date > start_date)
previous_data <- data_long %>%
filter(date <= start_date & date > (start_date %m-% months(6)))  # data from the previous 3 months
# Calculate average TF-IDF scores
avg_recent <- recent_data %>%
filter(term_type == myterm_type) %>%
group_by(term) %>%
summarise(avg_tf_idf_recent = mean(tf_idf))
avg_previous <- previous_data %>%
filter(term_type == myterm_type) %>%
group_by(term) %>%
summarise(avg_tf_idf_previous = mean(tf_idf))
# Merge the two datasets
trend_analysis <- merge(avg_recent, avg_previous, by = "term")
# Calculate the difference in TF-IDF scores
trend_analysis <- trend_analysis %>%
mutate(change_in_tf_idf = avg_tf_idf_recent - avg_tf_idf_previous)
# Identify top 5 terms with increased TF-IDF scores
top_increased <- trend_analysis %>%
arrange(desc(change_in_tf_idf)) %>%
head(5)
# Identify top 5 terms with decreased TF-IDF scores
top_decreased <- trend_analysis %>%
arrange(change_in_tf_idf) %>%
head(5)
print("Top 5 increased terms in the last 3 months:")
print(top_increased)
print("Top 5 decreased terms in the last 3 months:")
print(top_decreased)
state_index <- grep("prop_state_", colnames(data_all))
group_index <- grep("prop_group_", colnames(data_all))
user_index <- grep("prop_user_", colnames(data_all))
# Reshape from wide to long format and create a new 'term_type' column
data_long <- data_all %>%
pivot_longer(
cols = c(description_index, cause_index, close_notes_index),  # Excluding cluster and date from the reshaping
names_to = c("term_type", "term"),
names_sep = "_",  # Split column names at underscores
values_to = "tf_idf"
)
View(data_long)
state_index <- grep("prop_state_", colnames(data_all))
group_index <- grep("prop_group_", colnames(data_all))
user_index <- grep("prop_user_", colnames(data_all))
# Reshape from wide to long format and create a new 'term_type' column
data_long <- data_all %>%
pivot_longer(
cols = c(state_index, group_index, user_index),  # Excluding cluster and date from the reshaping
names_to = c("term_type", "term"),
names_sep = "_",  # Split column names at underscores
values_to = "tf_idf"
)
# remove columns of description_index
data_long <- data_long %>% select(-state_index, -group_index, -user_index)
View(data_long)
data_long <- data_long %>% filter(tf_idf > 0)  # Remove rows with 0 values
myterm = "Work.in.Progress"
myterm_type = "state"
# Convert date column to Date type if not already
data_long$date <- as.Date(data_long$opened)
# Define the date cutoff for the last 3 months
end_date <- max(data_long$date)  # assuming you want up to the latest date in your dataset
start_date <- end_date %m-% months(6)  # 3 months before the end date
# Filter data for the last 3 months and the period before it
recent_data <- data_long %>%
filter(date > start_date)
previous_data <- data_long %>%
filter(date <= start_date & date > (start_date %m-% months(6)))  # data from the previous 3 months
# Calculate average TF-IDF scores
avg_recent <- recent_data %>%
filter(term_type == myterm_type) %>%
group_by(term) %>%
summarise(avg_tf_idf_recent = mean(tf_idf))
avg_previous <- previous_data %>%
filter(term_type == myterm_type) %>%
group_by(term) %>%
summarise(avg_tf_idf_previous = mean(tf_idf))
# Merge the two datasets
trend_analysis <- merge(avg_recent, avg_previous, by = "term")
# Calculate the difference in TF-IDF scores
trend_analysis <- trend_analysis %>%
mutate(change_in_tf_idf = avg_tf_idf_recent - avg_tf_idf_previous)
# Identify top 5 terms with increased TF-IDF scores
top_increased <- trend_analysis %>%
arrange(desc(change_in_tf_idf)) %>%
head(5)
# Identify top 5 terms with decreased TF-IDF scores
top_decreased <- trend_analysis %>%
arrange(change_in_tf_idf) %>%
head(5)
print("Top 5 increased terms in the last 3 months:")
print(top_increased)
print("Top 5 decreased terms in the last 3 months:")
print(top_decreased)
View(data_long)
state_index <- grep("prop_state_", colnames(data_all))
group_index <- grep("prop_group_", colnames(data_all))
user_index <- grep("prop_user_", colnames(data_all))
# Reshape from wide to long format and create a new 'term_type' column
data_long <- data_all %>%
pivot_longer(
cols = c(state_index, group_index, user_index),  # Excluding cluster and date from the reshaping
names_to = c("prop", "term_type", "term"),
names_sep = "_",  # Split column names at underscores
values_to = "tf_idf"
)
# remove columns of description_index
# data_long <- data_long %>% select(-state_index, -group_index, -user_index)
data_long <- data_long %>% filter(tf_idf > 0)  # Remove rows with 0 values
View(data_long)
# remove columns of description_index
data_long <- data_long %>% select(-state_index, -group_index, -user_index)
state_index <- grep("prop_state_", colnames(data_all))
group_index <- grep("prop_group_", colnames(data_all))
user_index <- grep("prop_user_", colnames(data_all))
# Reshape from wide to long format and create a new 'term_type' column
data_long <- data_all %>%
pivot_longer(
cols = c(state_index, group_index, user_index),  # Excluding cluster and date from the reshaping
names_to = c("prop", "term_type", "term"),
names_sep = "_",  # Split column names at underscores
values_to = "tf_idf"
)
# remove columns of description_index
data_long <- data_long %>% select(-state_index, -group_index, -user_index)
data_long <- data_long %>% filter(tf_idf > 0)  # Remove rows with 0 values
myterm = "Work.in.Progress"
myterm_type = "state"
# Convert date column to Date type if not already
data_long$date <- as.Date(data_long$opened)
# Define the date cutoff for the last 3 months
end_date <- max(data_long$date)  # assuming you want up to the latest date in your dataset
start_date <- end_date %m-% months(6)  # 3 months before the end date
# Filter data for the last 3 months and the period before it
recent_data <- data_long %>%
filter(date > start_date)
previous_data <- data_long %>%
filter(date <= start_date & date > (start_date %m-% months(6)))  # data from the previous 3 months
# Calculate average TF-IDF scores
avg_recent <- recent_data %>%
filter(term_type == myterm_type) %>%
group_by(term) %>%
summarise(avg_tf_idf_recent = mean(tf_idf))
avg_previous <- previous_data %>%
filter(term_type == myterm_type) %>%
group_by(term) %>%
summarise(avg_tf_idf_previous = mean(tf_idf))
# Merge the two datasets
trend_analysis <- merge(avg_recent, avg_previous, by = "term")
# Calculate the difference in TF-IDF scores
trend_analysis <- trend_analysis %>%
mutate(change_in_tf_idf = avg_tf_idf_recent - avg_tf_idf_previous)
# Identify top 5 terms with increased TF-IDF scores
top_increased <- trend_analysis %>%
arrange(desc(change_in_tf_idf)) %>%
head(5)
# Identify top 5 terms with decreased TF-IDF scores
top_decreased <- trend_analysis %>%
arrange(change_in_tf_idf) %>%
head(5)
print("Top 5 increased terms in the last 3 months:")
print(top_increased)
print("Top 5 decreased terms in the last 3 months:")
print(top_decreased)
# Assuming you're interested in a specific term across dates
filtered_data <- data_long %>%
filter(term == myterm & term_type == myterm_type)
# Add a trendline for each cluster
ggplot(filtered_data, aes(x = opened, y = tf_idf, color = cluster)) +
geom_line(alpha = 0.4) +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Date (Opened)", y = "TF-IDF Score", title = paste("Trend of", myterm, "in", myterm_type, "Over Time")) +
theme_minimal()
View(data_all)
View(data_long)
myterm = "Service.Desk.1st.Level"
myterm_type = "group"
# Convert date column to Date type if not already
data_long$date <- as.Date(data_long$opened)
# Define the date cutoff for the last 3 months
end_date <- max(data_long$date)  # assuming you want up to the latest date in your dataset
start_date <- end_date %m-% months(6)  # 3 months before the end date
# Filter data for the last 3 months and the period before it
recent_data <- data_long %>%
filter(date > start_date)
previous_data <- data_long %>%
filter(date <= start_date & date > (start_date %m-% months(6)))  # data from the previous 3 months
# Calculate average TF-IDF scores
avg_recent <- recent_data %>%
filter(term_type == myterm_type) %>%
group_by(term) %>%
summarise(avg_tf_idf_recent = mean(tf_idf))
avg_previous <- previous_data %>%
filter(term_type == myterm_type) %>%
group_by(term) %>%
summarise(avg_tf_idf_previous = mean(tf_idf))
# Merge the two datasets
trend_analysis <- merge(avg_recent, avg_previous, by = "term")
# Calculate the difference in TF-IDF scores
trend_analysis <- trend_analysis %>%
mutate(change_in_tf_idf = avg_tf_idf_recent - avg_tf_idf_previous)
# Identify top 5 terms with increased TF-IDF scores
top_increased <- trend_analysis %>%
arrange(desc(change_in_tf_idf)) %>%
head(5)
# Identify top 5 terms with decreased TF-IDF scores
top_decreased <- trend_analysis %>%
arrange(change_in_tf_idf) %>%
head(5)
print("Top 5 increased terms in the last 3 months:")
print(top_increased)
print("Top 5 decreased terms in the last 3 months:")
print(top_decreased)
# Assuming you're interested in a specific term across dates
filtered_data <- data_long %>%
filter(term == myterm & term_type == myterm_type)
# Add a trendline for each cluster
ggplot(filtered_data, aes(x = opened, y = tf_idf, color = cluster)) +
geom_line(alpha = 0.4) +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Date (Opened)", y = "TF-IDF Score", title = paste("Trend of", myterm, "in", myterm_type, "Over Time")) +
theme_minimal()
myterm = "Squad.Infra"
myterm_type = "group"
# Convert date column to Date type if not already
data_long$date <- as.Date(data_long$opened)
# Define the date cutoff for the last 3 months
end_date <- max(data_long$date)  # assuming you want up to the latest date in your dataset
start_date <- end_date %m-% months(6)  # 3 months before the end date
# Filter data for the last 3 months and the period before it
recent_data <- data_long %>%
filter(date > start_date)
previous_data <- data_long %>%
filter(date <= start_date & date > (start_date %m-% months(6)))  # data from the previous 3 months
# Calculate average TF-IDF scores
avg_recent <- recent_data %>%
filter(term_type == myterm_type) %>%
group_by(term) %>%
summarise(avg_tf_idf_recent = mean(tf_idf))
avg_previous <- previous_data %>%
filter(term_type == myterm_type) %>%
group_by(term) %>%
summarise(avg_tf_idf_previous = mean(tf_idf))
# Merge the two datasets
trend_analysis <- merge(avg_recent, avg_previous, by = "term")
# Calculate the difference in TF-IDF scores
trend_analysis <- trend_analysis %>%
mutate(change_in_tf_idf = avg_tf_idf_recent - avg_tf_idf_previous)
# Identify top 5 terms with increased TF-IDF scores
top_increased <- trend_analysis %>%
arrange(desc(change_in_tf_idf)) %>%
head(5)
# Identify top 5 terms with decreased TF-IDF scores
top_decreased <- trend_analysis %>%
arrange(change_in_tf_idf) %>%
head(5)
print("Top 5 increased terms in the last 3 months:")
print(top_increased)
print("Top 5 decreased terms in the last 3 months:")
print(top_decreased)
# Assuming you're interested in a specific term across dates
filtered_data <- data_long %>%
filter(term == myterm & term_type == myterm_type)
# Add a trendline for each cluster
ggplot(filtered_data, aes(x = opened, y = tf_idf, color = cluster)) +
geom_line(alpha = 0.4) +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Date (Opened)", y = "TF-IDF Score", title = paste("Trend of", myterm, "in", myterm_type, "Over Time")) +
theme_minimal()
